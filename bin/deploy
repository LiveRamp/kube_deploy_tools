#!/usr/bin/env ruby
# Utility for applying Kubernetes manifests.

require 'tmpdir'

require 'kube_deploy_tools/formatted_logger'
require 'kube_deploy_tools/kubectl'
require 'kube_deploy_tools/shellrunner'
require 'kube_deploy_tools/deploy'
require 'kube_deploy_tools/deploy/options'
require 'kube_deploy_tools/deploy_config_file'
require 'kube_deploy_tools/artifact_registry'

def options
  @options ||= KubeDeployTools::Deploy::Optparser.new.parse(ARGV)
end

KubeDeployTools::Logger.logger = KubeDeployTools::FormattedLogger.build
KubeDeployTools::Shellrunner.shellrunner = KubeDeployTools::Shellrunner.new
context = options.context || KubeDeployTools.kube_context(target: options.target, environment: options.environment)
namespace = KubeDeployTools::Deploy::kube_namespace(context: context, kubeconfig: options.kubeconfig)
KubeDeployTools::Logger.logger = KubeDeployTools::FormattedLogger.build(context: context, namespace: namespace)
kubectl = KubeDeployTools::Kubectl.new(
  context: options.context,
  kubeconfig: options.kubeconfig,
)

config = KubeDeployTools::DeployConfigFile.new('deploy.yaml')
artifact_registry = config.artifact_registries[config.artifact_registry].driver

Dir.mktmpdir { |tmpdir|
  if options.from_files
    deploy_artifact_path = options.from_files
  else
    deploy_artifact_path = artifact_registry.download(
      project: options.project,
      build_number: options.build_number,
      flavor: options.flavor,
      name: options.artifact,

      pre_apply_hook: options.pre_apply_hook,
      output_dir: tmpdir,
    )
  end


  deploy = KubeDeployTools::Deploy.new(
    kubectl: kubectl,
    namespace: namespace,
    input_path: deploy_artifact_path,
    glob_files: options.glob_files,
    max_retries: options.max_retries,
    retry_delay: options.retry_delay
  )
  deploy.run(
    dry_run: options.dry_run,
    send_report: options.send_report
  )
}
